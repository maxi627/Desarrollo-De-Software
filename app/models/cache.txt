Producto

PK id_producto
nombre
precio
stock
FK id_categoria
Categorías

PK id_categoria
nombre
Detalle orden

PK id_detalle
FK id_pedido
FK id_producto
cantidad
precio
Usuario

PK id_usuario
nombre
email
contraseña
FK id_pedido

Producto a Categorías: Un producto está asociado con una categoría. Esto se representa por la clave foránea id_categoria en la tabla Producto que hace referencia a la clave primaria id_categoria en la tabla Categorías.
Detalle orden a Producto: Un detalle de orden está asociado con un producto. Esto se representa por la clave foránea id_producto en la tabla Detalle orden que hace referencia a la clave primaria id_producto en la tabla Producto.
Detalle orden a Usuario: Un detalle de orden está asociado con un usuario. Esto se representa por la clave foránea id_pedido en la tabla Detalle orden que hace referencia a la clave primaria id_pedido en la tabla Usuario.

MODELS
categorias.py

from app import db
from dataclasses import dataclass

@dataclass
class Categoria(db.Model):
    __tablename__ = 'Categorias'

    id_categoria: int = db.Column("id_categoria", db.Integer, primary_key=True, autoincrement=True) 
    nombre: str = db.Column('nombre',db.Text, db.ForeignKey(''), nullable=False)

orden.py

from app import db
from dataclasses import dataclass

@dataclass
class Orden(db.Model):
    __tablename__ = 'Orden'

    id_detalle: int = db.Column('id_detalle', db.Integer, primary_key=True)
    id_pedido: int = db.Column('id_pedido', db.Integer, db.ForeignKey('Usuario.id_usuario'), nullable=False)  
    id_producto: int = db.Column('id_producto', db.Integer, db.ForeignKey('Producto.id_producto'), nullable=False)
    cantidad: int = db.Column('cantidad', db.Integer, nullable=False)
    precio: int = db.Column('precio', db.Integer, nullable=False)

producto.py


from dataclasses import dataclass

from app import db

@dataclass
class Producto(db.Model):
    __tablename__ = 'Producto'

    id_producto: int = db.Column('id_producto',db.Integer, primary_key=True)
    nombre: str = db.Column('nombre',db.Text, nullable=False)
    precio: int = db.Column('precio',db.Integer, nullable=False)
    stock: int= db.column('stock',db.Integer,nullable=False)
    id_categoria: int = db.Column('id_categoria', db.Integer, db.ForeignKey('Categorias.id_categoria'), nullable=False) 
    
    ordenes = db.relationship("Orden", backref="producto", lazy=True)
    
usuario.py

from app import db
from dataclasses import dataclass

@dataclass
class Usuario(db.Model):
    __tablename__ = 'usuarios'

    id: int = db.Column('id',db.Integer, primary_key=True)
    nombre: str = db.Column('nombre',db.String(100), nullable=False)
    email: str = db.Column('email',db.String(120), unique=True, nullable=False)
    contrasena: str= db.Column('contrasena',db.String(100), nullable=False)
    id_pedido: int= db.colummn('id_pedido',db.integer,db.ForeignKey(''),unique=True,nullable=False)


MAPPING

categoria_schema.py

from marshmallow import fields, Schema, post_load,validate
from app.models.categorias import Categoria
# Esquema para el modelo Categoria:
class CategoriaSchema(Schema):
    id_categoria = fields.Integer(dump_only=True)
    nombre = fields.String(required=True,validate=validate.Length(min=2, max=40))
    productos = fields.Nested("ProductoSchema", many=True, only=("id_producto", "nombre", "precio", "stock"))
    
    @post_load
    def make_categoria(self, data, **kwargs):
        return Categoria(**data)

orden_schema.py

from marshmallow import fields, Schema, post_load
from app.models.orden import Orden

# Esquema para el modelo Orden:
class OrdenSchema(Schema):
    id_detalle = fields.Integer(dump_only=True)
    id_pedido = fields.Integer(required=True)
    id_producto = fields.Integer(required=True)
    cantidad = fields.Integer(required=True)
    precio = fields.Integer(required=True)

    @post_load
    def make_orden(self, data, **kwargs):
        return Orden(**data)


producto_schema.py

from marshmallow import fields, Schema, post_load
from app.models.producto import Producto

# Esquema para el modelo Producto:
class ProductoSchema(Schema):
    id_producto = fields.Integer(dump_only=True)
    nombre = fields.String(required=True)
    precio = fields.Integer(required=True)
    stock = fields.Integer(required=True)
    id_categoria = fields.Nested("CategoriaSchema", many=False)

    @post_load
    def make_producto(self, data, **kwargs):
        return Producto(**data)
    
usuario_schema.py

from marshmallow import validate, Schema, fields, post_load
from app.models import Usuario

# Define el esquema (Schema) para la clase Usuario
class UsuarioSchema(Schema):
    # Define campos del esquema y establece reglas de validación y serialización

    id = fields.Integer(dump_only=True)  # Campo 'id' de tipo Integer (solo para volcado/serialización)
    nombre = fields.String(required=True, validate=validate.Length(min=2, max=120))  # Campo 'nombre' de tipo String obligatorio con validación de longitud
    email = fields.String(required=True, validate=validate.Email())  # Campo 'email' de tipo String obligatorio con validación de email
    contrasena = fields.String(load_only=True)  # Campo 'contrasena' de tipo String (solo para carga/deserialización)

    # Método para manejar la carga de datos (deserialización)
    @post_load
    def make_usuario(self, data, **kwargs):
        return Usuario(**data)  # Crea una instancia de la clase Usuario con los datos deserializados














entonces me quedaría el model de producto así:

from dataclasses import dataclass
from app import db

@dataclass
class Producto(db.Model):
    __tablename__ = 'Producto'

    id_producto: int = db.Column('id_producto', db.Integer, primary_key=True)
    nombre: str = db.Column('nombre', db.Text, nullable=False)
    precio: int = db.Column('precio', db.Integer, nullable=False)
    stock: int = db.Column('stock', db.Integer, nullable=False)
    id_categoria: int = db.Column('id_categoria', db.Integer, db.ForeignKey('Categorias.id_categoria'), nullable=False) 
    
    ordenes = db.relationship("Detalle Orden", backref="producto", lazy=True)
    categoria = db.relationship("Categoria", backref="productos", lazy=True)

MAPPING
from marshmallow import fields, Schema, post_load
from app.models.producto import Producto

class ProductoSchema(Schema):
    id_producto = fields.Integer(dump_only=True)
    nombre = fields.String(required=True)
    precio = fields.Integer(required=True)
    stock = fields.Integer(required=True)
    id_categoria = fields.Integer(required=True)
    
    categoria = fields.Nested("CategoriaSchema", many=False, only=("id_categoria", "nombre"))
    
    @post_load
    def make_producto(self, data, **kwargs):
        return Producto(**data)

y el MODEL de orden
from app import db
from dataclasses import dataclass, fields

@dataclass
class Orden(db.Model):
    __tablename__ = 'Detalle Orden'

    id_detalle: int = db.Column('id_detalle', db.Integer, primary_key=True)
    id_pedido: int = db.Column('id_pedido', db.Integer, db.ForeignKey('Usuario.id_usuario'), nullable=False)  
    id_producto: int = db.Column('id_producto', db.Integer, db.ForeignKey('Producto.id_producto'), nullable=False)
    cantidad: int = db.Column('cantidad', db.Integer, nullable=False)
    precio: int = db.Column('precio', db.Integer, nullable=False)

MAPPING 
from marshmallow import fields, Schema, post_load
from app.models.orden import Orden

# Esquema para el modelo Orden:
class OrdenSchema(Schema):
    id_detalle = fields.Integer(dump_only=True)
    id_pedido = fields.Integer(required=True)
    id_producto = fields.Integer(required=True)
    cantidad = fields.Integer(required=True)
    precio = fields.Integer(required=True)
    producto = fields.Nested("ProductoSchema", many=True, only=("id_producto", "nombre", "precio", "stock"))
    
    
    @post_load
    def make_orden(self, data, **kwargs):
        return Orden(**data)
